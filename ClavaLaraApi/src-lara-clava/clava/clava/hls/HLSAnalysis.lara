import clava.hls.TraceInstrumentation;
import clava.hls.MathAnalysis;
import weaver.WeaverJps;

var HLSAnalysis = {};

HLSAnalysis.getJavaInterface = function() {
	return Java.type("pt.up.fe.specs.clava.weaver.hls.HighLevelSynthesisAPI");
}


HLSAnalysis.applyGenericStrategies = function(func, options) {
	if (options == null)
		options = "{}";
	else
		options = JSON.stringify(options);
	HLSAnalysis.getJavaInterface().applyGenericStrategies(func, options);
}


HLSAnalysis.applyFunctionInlining = function(func, B) {
	HLSAnalysis.getJavaInterface().applyFunctionInlining(func, B.toString());
}

HLSAnalysis.applyArrayStreaming = function(func) {
	HLSAnalysis.getJavaInterface().applyArrayStreaming(func);
}

HLSAnalysis.applyLoopStrategies = function(func, P) {
	HLSAnalysis.getJavaInterface().applyLoopStrategies(func, P.toString());
}

HLSAnalysis.applyLoadStoresStrategy = function(func, N) {
	HLSAnalysis.getJavaInterface().applyLoadStoresStrategy(func, N.toString());
}

HLSAnalysis.canBeInstrumented = function(func) {
	return HLSAnalysis.getJavaInterface().canBeInstrumented(func);
}

