import clava.memoi.MemoiUtils;

import lara.util.IdGenerator;
import lara.Strings;
import clava.ClavaJoinPoints;

/**
 * 		Makes a single global wrapper for all calls of the target
 * 	function.
 * 
 * @private
 * */
function _memoiGlobalWrapper(target, id, reportDir, memoiprofOptions) {
	
	var cSig = MemoiUtils.cSig(target._sig);
	var wrapperName =  'mw_' + cSig;
	var monitorName = 'mp_' + cSig;
	var monitorType = ClavaJoinPoints.typeLiteral('MemoiProf*');
	
	// make the wrapper
	for(var $call of Query.search("call", {"signature": s => target._sig === MemoiUtils.normalizeSig(s)})) {
		$call.wrap(wrapperName);
	}
	
	// instrument the wrapper
	_memoiInstrumentWrapper(wrapperName, monitorName, monitorType, target);
	
	// setup
	_memoiSetup(monitorName, monitorType, target, id, reportDir, ['global'], memoiprofOptions);
}

//~ /**
 //~ * 		Makes a single global wrapper for all calls of the target
 //~ * 	function.
 //~ * 
 //~ * @aspect
 //~ * @private
 //~ * */
//~ aspectdef _Memoi_GlobalWrapper
	//~ input
		//~ target, id, reportDir, memoiprofOptions
	//~ end
	
	//~ var cSig = MemoiUtils.cSig(target._sig);
	//~ var wrapperName =  'mw_' + cSig;
	//~ var monitorName = 'mp_' + cSig;
	//~ var monitorType = ClavaJoinPoints.typeLiteral('MemoiProf*');
	
	//~ // make the wrapper
	//~ for(var $call of Query.search("call", {"signature": s => target._sig === MemoiUtils.normalizeSig(s)})) {
		//~ $call.wrap(wrapperName);
	//~ }
	
	//~ // instrument the wrapper
	//~ _memoiInstrumentWrapper(wrapperName, monitorName, monitorType, target);
	
	//~ // setup
	//~ _memoiSetup(monitorName, monitorType, target, id, reportDir, ['global'], memoiprofOptions);
//~ end

/**
 * 		Makes an individual wrapper for each call of the target
 * 	function.
 * 
 * @private
 * */
function _memoiIndividualWrapper(target, idBase, reportDir, memoiprofOptions) {

	var cSig = MemoiUtils.cSig(target._sig);
	var wrapperNameBase =  'mw_' + cSig;
	var monitorNameBase = 'mp_' + cSig;
	var monitorType = ClavaJoinPoints.typeLiteral('MemoiProf*');
	
		// make the wrapper
	for(var $call of Query.search("call", {"signature": s => target._sig === MemoiUtils.normalizeSig(s)})) {
		
		// make the wrapper
		var wrapperName = IdGenerator.next(wrapperNameBase);
		$call.wrap(wrapperName);
		
		// instrument the wrapper
		var monitorName = IdGenerator.next(monitorNameBase);
		_memoiInstrumentWrapper(wrapperName, monitorName, monitorType, target);
		
		var callSiteInfo = $call.location;
		
		// setup
		var id = IdGenerator.next(idBase + '_');
		_memoiSetup(monitorName, monitorType, target, id, reportDir, [callSiteInfo], memoiprofOptions);
	}
}

//~ /**
 //~ * 		Makes an individual wrapper for each call of the target
 //~ * 	function.
 //~ * 
 //~ * @aspect
 //~ * @private
 //~ * */
//~ aspectdef _Memoi_IndividualWrapper
	//~ input
		//~ target, idBase, reportDir, memoiprofOptions
	//~ end
	
	//~ var cSig = MemoiUtils.cSig(target._sig);
	//~ var wrapperNameBase =  'mw_' + cSig;
	//~ var monitorNameBase = 'mp_' + cSig;
	//~ var monitorType = ClavaJoinPoints.typeLiteral('MemoiProf*');
	
		//~ // make the wrapper
	//~ for(var $call of Query.search("call", {"signature": s => target._sig === MemoiUtils.normalizeSig(s)})) {
		
		//~ // make the wrapper
		//~ var wrapperName = IdGenerator.next(wrapperNameBase);
		//~ $call.wrap(wrapperName);
		
		//~ // instrument the wrapper
		//~ var monitorName = IdGenerator.next(monitorNameBase);
		//~ _memoiInstrumentWrapper(wrapperName, monitorName, monitorType, target);
		
		//~ var callSiteInfo = $call.location;
		
		//~ // setup
		//~ var id = IdGenerator.next(idBase + '_');
		//~ _memoiSetup(monitorName, monitorType, target, id, reportDir, [callSiteInfo], memoiprofOptions);
	//~ }
//~ end

//~ /**
 //~ * 		Instruments a single wrapper with the calls to the memoization profiling
 //~ * library. Adds declaration to the monitor. Also adds the needed header include
 //~ * to the file.
 //~ * 
 //~ * @aspect
 //~ * @private
 //~ * */
//~ aspectdef _Memoi_InstrumentWrapper
	//~ input
		//~ wrapperName,
		//~ monitorName,
		//~ monitorType,
		//~ target
	//~ end
	
	//~ var numInputs = target.numInputs;
	//~ var numOutputs = target.numOutputs;
	
	//~ select file.function{wrapperName}.stmt.call end
	//~ apply
		//~ var code = 'mp_inc(' + monitorName;
		
		//~ var $params = $function.params;
		
		//~ for(var i = 0; i < numInputs; i++) {
			//~ code += ", &" + $params[i].name;
		//~ }
		
		//~ if(numOutputs == 1) {
		
			//~ code += ', &result';
		//~ } else {
		
			//~ for(var o = numInputs; o < $params.length; o++) {
				//~ code += ", " + $params[o].name;
			//~ }
		//~ }
				
		//~ code += ');';
		
		//~ insert after code;
		//~ insert after "#pragma omp critical"; // needed for correct semantics under OpenMP
		
		//~ $file.exec addGlobal(monitorName, monitorType, 'NULL');
		
		//~ $file.exec addInclude("MemoiProfiler.h", false);
		//~ $file.exec addInclude('stdlib.h', true);
	//~ end
//~ end

function _memoiInstrumentWrapper(wrapperName, monitorName, monitorType, target) {
	
	var numInputs = target.numInputs;
	var numOutputs = target.numOutputs;
	
	var query = Query
		.search("file")
		.search("function", {"name":wrapperName})
		.search("call")
		.chain();
		
	for(var row of query) {
		
		var code = 'mp_inc(' + monitorName;
		
		var $params = row["function"].params;
		
		for(var i = 0; i < numInputs; i++) {
			code += ", &" + $params[i].name;
		}
		
		if(numOutputs == 1) {
		
			code += ', &result';
		} else {
		
			for(var o = numInputs; o < $params.length; o++) {
				code += ", " + $params[o].name;
			}
		}
		
		code += ');';
		
		var $call = row["call"];
		$call.insert("after", code);
		$call.insert("after", "#pragma omp critical"); // needed for correct semantics under OpenMP
		
		var $file = row["file"];
		$file.addGlobal(monitorName, monitorType, 'NULL');
		$file.addInclude("MemoiProfiler.h", false);
		$file.addInclude('stdlib.h', true);
	}
}

//~ /**
 //~ * 		Performs the setup needed for the instrumentation with the
 //~ * 	memoization profiling library in the main file. This includes
 //~ * 	declaring and initializing the monitor, printing the report, and
 //~ * 	destroying the monitor.
 //~ * 
 //~ * @aspect
 //~ * @private
 //~ * */
//~ aspectdef _Memoi_Setup

	//~ input
		//~ monitorName,monitorType,
		//~ target, id,	reportDir,
		//~ callSiteInfo, memoiprofOptions
	//~ end

	//~ var inputsCode = target._inputTypes.map(function(e){return "mp_" + e;}).join(',').toUpperCase();
	//~ var outputsCode = target._outputTypes.map(function(e){return "mp_" + e;}).join(',').toUpperCase();

	//~ var mainFound = false;

	//~ select file.function{'main'}.body end
	//~ apply
	
		//~ mainFound = true;
		
		//~ var memoiReportPath = "path_" + monitorName;
		
		//~ // memoiprof options
		//~ if(memoiprofOptions._samplingKind !== "off") {
			//~ var samplingKind = "MP_SAMPLING_" + memoiprofOptions._samplingKind.toUpper();
			//~ $body.exec insertBegin(%{mp_set_sampling([[monitorName]], [[samplingKind]], [[memoiprofOptions._samplingRate]]);}%);
		//~ }
		
		//~ if(memoiprofOptions._periodicReportKind) {
			//~ $body.exec insertBegin(%{mp_set_periodic_reporting([[monitorName]], "MP_PERIODIC_ON", [[memoiprofOptions._periodicReportRate]]);}%);
		//~ }
		
		//~ if(memoiprofOptions._cullingKind) {
			//~ $body.exec insertBegin(%{mp_set_culling([[monitorName]], "MP_CULLING_ON", [[memoiprofOptions._cullingRatio]]);}%);
		//~ }
		
		//~ if(memoiprofOptions._approxKind) {
			//~ $body.exec insertBegin(%{mp_set_approx([[monitorName]], "MP_APPROX_ON", [[memoiprofOptions._approxBits]]);}%);
		//~ }
		
		//~ call _Memoi_AddCallSiteInfo($body, callSiteInfo, monitorName);
		//~ $body.exec insertBegin(%{free([[memoiReportPath]]);}%); // can free here, since mp_init duped it
		//~ $body.exec insertBegin(%{[[monitorName]] = mp_init("[[target._sig]]", "[[id]]", [[memoiReportPath]], [[target._inputTypes.length]], [[target._outputTypes.length]], [[inputsCode]], [[outputsCode]]);}%);
		//~ $body.exec insertBegin(%{char* [[memoiReportPath]] = mp_make_report_path("[[reportDir]]", "[[monitorName]]");}%);
		
		//~ /* add functions to print and clean up at every return on main */
		//~ $function.exec insertReturn(%{mp_to_json([[monitorName]]);}%);
		//~ $function.exec insertReturn(%{[[monitorName]] = mp_destroy([[monitorName]]);}%);
		

		//~ $file.exec addGlobal(monitorName, monitorType, 'NULL');

		//~ $file.exec addInclude('MemoiProfiler.h', false);
		//~ $file.exec addInclude('stdlib.h', true);
	//~ end
	
	//~ checkTrue(mainFound, 'Could not find main function needed for setup', 'MemoiProf');
//~ end

function _memoiSetup(monitorName, monitorType, target, id, reportDir, callSiteInfo, memoiprofOptions) {
	
	var inputsCode = target._inputTypes.map(function(e){return "mp_" + e;}).join(',').toUpperCase();
	var outputsCode = target._outputTypes.map(function(e){return "mp_" + e;}).join(',').toUpperCase();
	
	var query = Query
			.search("file")
			.search("function", {"name": "main"})
			.children("scope")
			.chain()[0];

	checkTrue(query !== undefined, 'Could not find main function needed for setup', 'MemoiProf');	

	var memoiReportPath = "path_" + monitorName;
	
	var $body = query["scope"];
	
	// memoiprof options
	if(memoiprofOptions._samplingKind !== "off") {
		var samplingKind = "MP_SAMPLING_" + memoiprofOptions._samplingKind.toUpper();
		$body.insertBegin(%{mp_set_sampling([[monitorName]], [[samplingKind]], [[memoiprofOptions._samplingRate]]);}%);
	}
	
	if(memoiprofOptions._periodicReportKind) {
		$body.insertBegin(%{mp_set_periodic_reporting([[monitorName]], "MP_PERIODIC_ON", [[memoiprofOptions._periodicReportRate]]);}%);
	}
	
	if(memoiprofOptions._cullingKind) {
		$body.insertBegin(%{mp_set_culling([[monitorName]], "MP_CULLING_ON", [[memoiprofOptions._cullingRatio]]);}%);
	}
	
	if(memoiprofOptions._approxKind) {
		$body.insertBegin(%{mp_set_approx([[monitorName]], "MP_APPROX_ON", [[memoiprofOptions._approxBits]]);}%);
	}
	
	_memoiAddCallSiteInfo($body, callSiteInfo, monitorName);
	$body.insertBegin(%{free([[memoiReportPath]]);}%); // can free here, since mp_init duped it
	$body.insertBegin(%{[[monitorName]] = mp_init("[[target._sig]]", "[[id]]", [[memoiReportPath]], [[target._inputTypes.length]], [[target._outputTypes.length]], [[inputsCode]], [[outputsCode]]);}%);
	$body.insertBegin(%{char* [[memoiReportPath]] = mp_make_report_path("[[reportDir]]", "[[monitorName]]");}%);
	
	/* add functions to print and clean up at every return on main */
	var $function = query["function"];
	$function.insertReturn(%{mp_to_json([[monitorName]]);}%);
	$function.insertReturn(%{[[monitorName]] = mp_destroy([[monitorName]]);}%);
	
	var $file = query["file"];
	$file.addGlobal(monitorName, monitorType, 'NULL');
	$file.addInclude('MemoiProfiler.h', false);
	$file.addInclude('stdlib.h', true);
}

//~ aspectdef _Memoi_AddCallSiteInfo
	//~ input $mainBody, callSiteInfo, monitorName end
	
	//~ // call site info
	//~ if(callSiteInfo === undefined) {
		//~ callSiteInfo = ['global'];
	//~ }
	
	//~ checkArray(callSiteInfo);
	
	//~ var length = callSiteInfo.length;
	//~ var code = 'mp_set_call_sites(' + monitorName + ', ' + length ;
	//~ for(var i of callSiteInfo) {
		//~ code += ', "' + i + '"';
	//~ }
	//~ code += ');';
	
	//~ $mainBody.exec insertBegin(code);
//~ end

function _memoiAddCallSiteInfo($mainBody, callSiteInfo, monitorName) {
	
	// call site info
	if(callSiteInfo === undefined) {
		callSiteInfo = ['global'];
	}
	
	checkArray(callSiteInfo);
	
	var length = callSiteInfo.length;
	var code = 'mp_set_call_sites(' + monitorName + ', ' + length ;
	for(var i of callSiteInfo) {
		code += ', "' + i + '"';
	}
	code += ');';
	
	$mainBody.insertBegin(code);
}
