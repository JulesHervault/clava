import lara.Io;

function _isPowerOf2(num) {
	
	var log = _baseLog(num, 2);
	
	return log === parseInt(log, 10);
}

/**
 * 		Reads memoization profiling reports and sorts the counts.
 * */
function _readReports(reportsPaths) {

	var reports = {};
	var counter = 0;
	
	for (var reportPath of reportsPaths) {
		
		var report = Io.readJson(reportPath);
		
		// add the path to uniquely identify this report
		report.path = reportPath;
		
		// add report to map
		_mapReport(reports, report);
		
		counter++;
	}
	
	debug('read reports: ' + counter);
	return _combineReports(reports);
}

/**
 * 		Maps reports into a double map.
 * 		target function -> call site -> list of reports
 * */
function _mapReport(reportsMap, report) {
	
	if (reportsMap[report.funcSig] === undefined) {
		
		reportsMap[report.funcSig] = {};
	}
	
	if (reportsMap[report.funcSig][report.call_sites] === undefined) {
		
		reportsMap[report.funcSig][report.call_sites] = [];
	}
	
	reportsMap[report.funcSig][report.call_sites].push(report);
	
}

/**
 * 		Combines reports of the same function and same call site from
 * 	different profiling runs.
 * */
function _combineReports(originalReports) {
			
	var finalReports = [];
	
	for(var func in originalReports) {
		debug('combining reports for function ' + func);
		for(var callSite in originalReports[func]) {
			debug('combining reports for call site ' + callSite);
			// get old reports for the current <func, call>
			var reports = originalReports[func][callSite];
	
			// new report stores every run info in arrays
			var newReport = {
				funcSig : func,
				call_sites : callSite,
				reportCount : reports.length,
				elements : [],
				calls : [],
				hits : [],
				misses : [],
				inputCount : reports[0].inputCount,
				inputTypes : reports[0].inputTypes,
				counts : {} // counts is temporarily a map to ease the combination
			};
			
			// iterate all old reports
			for(var oldReport of reports) {
				
				// add all info to the corresponding arrays
				newReport.elements.push(oldReport.elements);
				newReport.calls.push(oldReport.calls);
				newReport.hits.push(oldReport.hits);
				newReport.misses.push(oldReport.misses);
				
				// iterate all counts of the old report
				for(var count of oldReport.counts) {
					
					var key = count.key;
					
					// build new counts using the key attribute as a key
					if(newReport.counts[key] === undefined || newReport.counts[key] === null) {
					//~ if(!(key in newReport.counts)) {
						
						newReport.counts[key] = {
							key : key,
							output : count.output,
							counter : []
						};
					}

					var oldCounter = count.counter;
					newReport.counts[key].counter.push(oldCounter);		
				}
			}
			// convert counts from a map to an array
			_convertCounts(newReport);
	
			finalReports.push(newReport);
		}
	}
	
	debug('combined reports: ' + finalReports.length);
	
	return finalReports;
}

/**
 * 		Generates the table and supporting code for this report.
 * 		
 * 		Inserts elements in the table based on the predicate insertPred.
 * */
function _generate(insertPred, countComparator, report, isMemoiDebug, tableSize) {

	var callSite = report.call_sites;
	var signature = report.funcSig;
	
	var wt;
	
	if(callSite === 'global') {
		wt = call _Memoi_WrapGlobalTarget(signature);
	} else {
		wt = call _Memoi_WrapSingleTarget(signature, callSite);
	}
	call _Memoi_InsertTableCode(insertPred, countComparator, report, wt.wrapperName, isMemoiDebug, tableSize);
}

aspectdef _Memoi_WrapGlobalTarget
	input signature end
	output wrapperName end
	
	select stmt.call end
	apply

		var sig = $call.signature;
		sig = Strings.replacer(sig, ' ', '');
		if(sig != signature) {
			continue;
		}

		var normalizedSig = _normalizeSig(signature);
		
		wrapperName = "mw_" + normalizedSig;
		exec wrap(wrapperName);
		
		debug('wrapped');
	end
end

aspectdef _Memoi_WrapSingleTarget
	input signature, location end
	output wrapperName end
	
	select stmt.call end
	apply

		var sig = $call.signature;
		sig = Strings.replacer(sig, ' ', '');
		if(sig != signature) {
			continue;
		}

		var normalizedSig = _normalizeSig(signature);
		
		wrapperName = IdGenerator.next("mw_" + normalizedSig);
		exec wrap(wrapperName);
		
		debug('wrapped');
		return;
	end
	condition
		$call.location === location
	end
	
	throw "Did not find call to " + signature + " at " + location;
end

aspectdef _Memoi_InsertTableCode
	input insertPred, countComparator, report, wrapperName, isMemoiDebug, tableSize end
	
	select file.function{wrapperName}.call end
	apply
		if(isMemoiDebug) {
			var totalName = wrapperName + '_total_calls';
			var missesName = wrapperName + '_total_misses';
			$file.exec addGlobal(totalName, ClavaJoinPoints.builtinType("int"), '0');
			$file.exec addGlobal(missesName, ClavaJoinPoints.builtinType("int"), '0');
			insert before '[[totalName]]++;';
			insert after '[[missesName]]++;';
			
			call _Memoi_AddMainDebug(totalName, missesName, wrapperName);
		}
		
		var tableCode = _makeTableCode(insertPred, countComparator, report, $function, tableSize);
		insert before tableCode;
		$file.exec addInclude('stdint.h', true);
	end
end

aspectdef _Memoi_AddMainDebug
	input totalName, missesName, wrapperName end
	
	select file.function{'main'} end
	apply
		$file.exec addGlobal(totalName, ClavaJoinPoints.builtinType("int"), '0');
		$file.exec addGlobal(missesName, ClavaJoinPoints.builtinType("int"), '0');
		$file.addInclude('stdio.h', true);
		
			$function.exec insertReturn(%{
				printf("[[wrapperName]]\t%d / %d (%.2f%%)\n",
					[[totalName]] - [[missesName]],
					[[totalName]],
					([[totalName]] - [[missesName]]) * 100.0 / [[totalName]]);
			}%);
	end
end

function _baseLog(num, base) {
	
	return Math.log(num) / Math.log(base);
}

function _makeTableCode(insertPred, countComparator, report, $function, tableSize) {
	
	var indexBits = _baseLog(tableSize, 2);

	debug('table size: ' + tableSize);
	debug('index bits: ' + indexBits);

	var table = _makeTable(insertPred, countComparator, report, $function, indexBits, tableSize);
	var code = _makeCode(table, indexBits, tableSize, $function, report);

	return code;
}

var sizeMap = {
	'float': 32,
	'int': 32,
	'double': 64
	};

function _makeCode(table, indexBits, tableSize, $function, report) {
	
	// table code
	var nanBits = 'fff8000000000000';
	var inputCount = report.inputCount;
	
	var tableCode = 'static const uint64_t table[' + tableSize + '][' + (inputCount + 1)  + '] = {\n';
	for(var i = 0; i < tableSize; i++) {

		tableCode += '\t{';
		if(table[i] === undefined) {

			for(var ic = 0; ic < inputCount; ic++) {
				tableCode += '0x' + nanBits + ', ';
			}
			tableCode += '0';
		} else {
			
			var fullKey = table[i].fullKey;
			var keys = fullKey.split('#');
			for(var k = 0; k < keys.length; k++) {
				tableCode += '0x' + keys[k] + ', ';
			}
			tableCode += '0x' + table[i].output;
		}
		tableCode += '},\n';
	}
	tableCode += '};';

	// logic code
	var logicCode = '';
	var maxVarBits = 0;
	var varNames = [];
	
	// get the bits of all parameters
	for(var $param of $function.params) {
	
		var name = $param.name;
		var varBits = sizeMap[$param.type.code];
		
		if(varBits > maxVarBits) {maxVarBits = varBits;}
		
		var varName = name +'_bits';
		varNames.push(varName);
		logicCode += 'uint' + varBits + '_t ' + varName + ' = *(uint' + varBits + '_t*)&' + name + ';\n';
	}
	debug('max var bits: ' + maxVarBits);
	
	// merge all bits
	logicCode += '\nuint' + maxVarBits + '_t hash_' + maxVarBits +'_bits = ';
	logicCode += varNames.join(' ^ ');
	logicCode += ';\n';
	
	var iters = _baseLog(maxVarBits / indexBits, 2);
	var intIters = parseInt(iters, 10);

	var large = maxVarBits;
	for(var i = 0; i < intIters; i++) {

		var small = large / 2;
		logicCode += 'uint' + small + '_t hash_' + small + '_bits = (hash_' + large +'_bits ^ (hash_' + large +'_bits >> ' + small + '));\n';
		large = large / 2;
	}
	
	// if not integer, we need to mask bits at the end
	if(iters !== intIters) {
		var numMaskBits = small - indexBits;
		logicCode += 'uint' + small + '_t mask = 0xffff >> (16 - ' + indexBits + ');\n';
		logicCode += 'uint' + small + '_t hash_' + indexBits + '_bits = hash_' + small +'_bits & mask;\n';			
	}
	
	// lookup code
	logicCode += '\nif(';
	
	var access = 'table[hash_' + indexBits + '_bits]';
	var testClauses = [];
	for(var v = 0; v < varNames.length; v++) {
		
		testClauses.push(access + '[' + v + '] == ' + varNames[v]);
	}
	logicCode += testClauses.join(' && ');
	
	logicCode += ') {';
	logicCode += '\n\treturn *(' + $function.functionType.returnType.code + ' *) &table[hash_' + indexBits + '_bits][' + inputCount + '];\n}\n';	
	

	// concat
	return tableCode + '\n\n' + logicCode;
}

function _combineKeys(keys) {
	
	var numKeys = keys.length;
	var key = '';

	var keyLength = 16;
	var base = 16;
	for(var i = 0; i < keyLength; i++) {
		
		var currentNumber = parseInt(keys[0].charAt(i), base);
		
		for(var n = 1; n < numKeys; n++) {
			
			var newNumber = parseInt(keys[n].charAt(i), base);
			currentNumber = currentNumber ^ newNumber;
		}
		
		key += currentNumber.toString(16);
	}
	
	return key;
}

function _makeTable(insertPred, countComparator, report, $function, indexBits, tableSize) {
	
	var collisions = 0;
	var collisionPercentage;
	var maxCollision = 0;
	var hashMaxCollision;
	var coverage;
	var code = "";
	var table = [];
	
	var counts = report.counts;
	counts.sort(countComparator);
	var totalElements = counts.length;
	
	for(var i = 0; i < totalElements; i++) {
		
		var count = counts[i];
		
		if(!insertPred(count, report)) {
			continue;
		}

		var keys = count.key.split('#');
		
		if(keys.length > 1) {
			var key = _combineKeys(keys);
		} else {
			var key = count.key;
		}
		
		
		var hash = _hashFunction(key, indexBits);
		
		if(table[hash] === undefined) {

			table[hash] = {'key' : key,
						'output' : count.output,
						'collisions' : 0,
						'counter' : count.counter,
						'fullKey' : count.key};
		} else {
			table[hash].key = key;
			table[hash].output = count.output;
			table[hash].counter = count.counter;
			table[hash].fullKey = count.key;

			// collisions on this specific position
			table[hash].collisions++;
			if(table[hash].collisions > maxCollision) {maxCollision = table[hash].collisions; hashMaxCollision = hash;}
			
			// total collisions
			collisions++;
		}
	}
	
	if(isDebug()) {
		_printTableReport(collisions, totalElements, maxCollision, report, tableSize, table);
	}
	
	return table;
}

function _printTableReport(collisions, totalElements, maxCollision, report, tableSize, table) {

	var tableCalls = 0;
	var tableElements = 0;
	for(var i = 0; i < tableSize; i++) {

		if(table[i] != undefined) {

			tableCalls += mean(table[i].counter, report.reportCount);
			tableElements++;
		}
	}
	var totalCalls = mean(report.calls, report.reportCount);
	var collisionPercentage = collisions / totalElements * 100;
	var elementsCoverage = tableElements / totalElements * 100;
	var callCoverage = tableCalls / totalCalls * 100;
	
	debug('collisions: ' + collisions + ' (' + (collisionPercentage.toFixed(2)) + '%)');
	debug('largest collision: ' + maxCollision);
	debug('element coverage: ' + tableElements + '/' + totalElements + ' (' + (elementsCoverage.toFixed(2)) + ')%');
	debug('call coverage: ' + tableCalls + '/' + totalCalls + ' (' + (callCoverage.toFixed(2)) + ')%');
}

function _hashFunctionHalf(bits64){
	
	var len = bits64.length;
	var hashString = '';
	
	for(var i = 0; i < len / 2; i++) {

		var number = parseInt(bits64.charAt(i), 16) ^ parseInt(bits64.charAt(i+len/2), 16);
		hashString +=  number.toString(16);
	}

	return hashString;
}

function _hashFunctionOld(bits64, indexBits) {
	
	switch(indexBits) {

		case 8:
			var bits32 = _hashFunctionHalf(bits64);
			var bits16 = _hashFunctionHalf(bits32);
			var bits8 = _hashFunctionHalf(bits16);
			return parseInt(bits8, 16);
		case 16:
			var bits32 = _hashFunctionHalf(bits64);
			var bits16 = _hashFunctionHalf(bits32);
			return parseInt(bits16, 16);
		default:
			return bits64;
			break;				
	}
}

function _hashFunction(bits64, indexBits) {
	
	var varBits = 64;
	var lastPower = varBits;
	var iters = _baseLog(varBits / indexBits, 2);
	var intIters = parseInt(iters, 10);
	
	var hash = bits64;
	for(var i = 0; i < intIters; i++) {
		hash = _hashFunctionHalf(hash);
		lastPower = lastPower / 2;
	}
	
	// if not integer, we need to mask bits at the end
	if(iters !== intIters) {
		
		// mask starts with 16 bits
		var mask = parseInt('0xffff', 16);
		var shift = 16 - indexBits;
		mask = mask >> (shift);
				
		hash = parseInt(hash, 16);
		
		hash = hash & mask;
		return hash;
	}
	
	hash = parseInt(hash, 16);
	return hash;
}

/**
 * 		Converts counts from a map to an array.
 * */
function _convertCounts(newReport) {

	var a = [];

	for(var countP in newReport.counts) {

		var count = newReport.counts[countP];
		a.push(count);
	}
	
	
	newReport.counts = a;
}

// function
function totalTopN(report, n, reportCount) {

	var result = 0;

	var averageCounts = [];
	
	for(var count of report.counts) {
		averageCounts.push(mean(count.counter, reportCount));
	}

	sortDescending(averageCounts);

	for(var i = 0; i < Math.min(n, averageCounts.length); i++){

		result += averageCounts[i];
	}

	return result;
}

// function
function elementsForRatio(report, total, ratio, reportCount) {

	var sum = 0;
	
	var averageCounts = [];
	
	for(var count of report.counts) {
		averageCounts.push(mean(count.counter, reportCount));
	}

	sortDescending(averageCounts);
	
	for(var elements = 0; elements < averageCounts.length; elements++){

		sum += averageCounts[elements];
		if(sum / total > ratio) {
			return elements + 1;
		}
	}

	return report.elements; // ?
}

// function
function getQuartVal(counts, idx) {
	
	var floor = Math.floor(idx);
	
	if(idx == floor) {
		var val = (counts[idx] + counts[idx-1]) / 2;
	} else {
		var val = counts[floor];
	}
	
	return val;
}

// function
function bwp(report, reportCount) {
	
	var s = {};
	
	var averageCounts = [];
	
	for(var count of report.counts) {
		averageCounts.push(mean(count.counter, reportCount));
	}

	sortDescending(averageCounts);
	
	var length = averageCounts.length;
	
	s.min = averageCounts[length-1];
	s.q1 = getQuartVal(averageCounts, 1/4 * length); 
	s.q2 = getQuartVal(averageCounts, 2/4 * length); 
	s.q3 = getQuartVal(averageCounts, 3/4 * length); 
	s.max = averageCounts[0];
	s.iqr = s.q3 - s.q1;
	
	return s;
}

// function
function printBwp(report, reportCount) {
	
	var b = bwp(report, reportCount);
	var s = '{ ';
	
	s += b.min += ', ';
	s += b.q1 += ', ';
	s += b.q2 += ', ';
	s += b.q3 += ', ';
	s += b.max;
				
	s += ' } iqr: ' + b.iqr;
	
	println(s);
}

function mean(values, count) {
	
	var sum = 0;
	
	for(var value of values) {
		
		sum += value;
	}
	
	if(count === undefined) {
		return sum / values.length;
	} else {
		return sum / count;
	}
}

function sortDescending(array) {

	return array.sort(function(a, b){

		if(a < b)
			return 1;
		else if(a > b)
			return -1;
		else
			return 0;
	});
}

function sortAscending(array) {

	return sortDescending(array).reverse();
}

