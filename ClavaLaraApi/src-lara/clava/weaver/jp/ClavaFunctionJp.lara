import weaver.jp.FunctionJp;
import weaver.Weaver;


// Override FunctionJp contructor
var oldFunctionJp = FunctionJp.prototype;

FunctionJp = function(astNode) {
	// check for definition
	if(astNode.getDefinition().isPresent())
		astNode = astNode.getDefinition().get();
		
	// Parent constructor
    DeclJp.call(this,astNode);
}

FunctionJp.prototype = oldFunctionJp;

_lara_dummy_ = Object.defineProperty(FunctionJp.prototype, 'id', {
	get: function () { 
		return this.name; 
	}
});

_lara_dummy_ = Object.defineProperty(FunctionJp.prototype, 'name', {
	configurable: true,
	get: function () {  
		return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).name; 
	}
});

_lara_dummy_ = Object.defineProperty(FunctionJp.prototype, 'signature', {
	configurable: true,
	get: function () {  
		return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).signature; 
	}
});

_lara_dummy_ = Object.defineProperty(FunctionJp.prototype, 'returnType', {
	configurable: true,
	get: function () {  	
		return CommonJoinPoints.toJoinPoint(this.astNode.getReturnType()); 
	}
});

