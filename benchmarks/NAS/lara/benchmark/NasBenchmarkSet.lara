import lara.benchmark.NasBenchmarkInstance;

import lara.benchmark.BenchmarkSet;

import lara.util.PredefinedStrings;
import lara.util.StringSet;

/**
 * C-version of the NAS benchmarks.
 */
function NasBenchmarkSet() {
    // Parent constructor
    BenchmarkSet.call(this, "NasBenchmarkSet");
	
	this._testBenchmarks = ["BT", "CG", "EP", "FT", "IS", "LU", "MG", "SP"];	
	this._testInputSizes = ["W"];
}
// Inheritance
NasBenchmarkSet.prototype = Object.create(BenchmarkSet.prototype);

/*
 * Available benchmarks
 */
//NasBenchmarkSet._benchmarkNames = new StringSet("BT", "CG", "EP", "FT", "IS", "LU", "MG", "SP", "UA"); // UA is currently having compilation problems, disabled
//NasBenchmarkSet._benchmarkNames = new StringSet("BT", "CG", "EP", "FT", "IS", "LU", "MG", "SP");

NasBenchmarkSet._benchmarkNames = new PredefinedStrings("benchmark name", true, ["BT", "CG", "EP", "FT", "IS", "LU", "MG", "SP"]);

/*
 * Available sizes
 */
//NasBenchmarkSet._inputSizes = new StringSet("S", "W", "A", "B", "C", "D", "E");
NasBenchmarkSet._inputSizes = new PredefinedStrings("input size", true, ["S", "W", "A", "B", "C", "D", "E"]);		


/**
 * @return {lara.util.PredefinedStrings} Names of the available benchmarks.
 */
NasBenchmarkSet.getBenchmarkNames = function() {
	return NasBenchmarkSet._benchmarkNames;
//	return NasBenchmarkSet._benchmarkNames.values();
}

/**
 * @return {lara.util.PredefinedStrings} Available input sizes (some benchmarks might not support all sizes).
 */
NasBenchmarkSet.getInputSizes = function() {
	return NasBenchmarkSet._inputSizes;
	//return NasBenchmarkSet._inputSizes.values();
}

/**
 * @return {boolean} true if the given String is a valid benchmark name.
 */
 /*
NasBenchmarkSet.isValidName = function(benchName) {
	return NasBenchmarkSet._benchmarkNames.has(benchName);
}
*/

/**
 * @return {boolean} true if the given String is a valid input size.
 */
 /*
NasBenchmarkSet.isValidSize = function(inputSize) {
	return NasBenchmarkSet._inputSizes.has(inputSize);
}
*/

NasBenchmarkSet.isSizeSupported = function(benchName, inputSize) {
	// Check if name and inputSize are valid
	NasBenchmarkSet.getBenchmarkNames().test(benchName);
	NasBenchmarkSet.getInputSizes().test(inputSize);
	//NasBenchmarkSet._checkBenchName(benchName, true);
	//NasBenchmarkSet._checkInputSize(inputSize, true);	

	// Benchmarks supported sizes map:
	//BT: S, W, A, B, C, D, E
	//CG: S, W, A, B, C
	//EP: S, W, A, B, C, D, E
	//FT: S, W, A, B, C, D, E
	//IS: S, W, A, B, C, D
	//LU: S, W, A, B, C, D, E
	//MG: S, W, A, B, C, D, E
	//SP: S, W, A, B, C, D, E
	//UA: S, W, A, B, C, D	
	
	if(benchName === "CG" && (inputSize === "D" || inputSize === "E")) {
		return false;
	}

	if(benchName === "IS" && (inputSize === "E")) {
		return false;
	}	
	
	if(benchName === "UA" && (inputSize === "E")) {
		return false;
	}	
	
	return true;
}

/*
NasBenchmarkSet._checkBenchName = function(benchName, strict) {
	if(!NasBenchmarkSet.isValidName(benchName)) {
		var message = "Invalid benchmark name '" + benchName + "'. Valid names: " + NasBenchmarkSet.getBenchmarkNames().values();
		if(strict) {
			throw message;
		} 
				
		println(message);
		return false;
	}
	
	return true;
}
*/
/*
NasBenchmarkSet._checkInputSize = function(inputSize, strict) {
	if(!NasBenchmarkSet.isValidSize(inputSize)) {
		var message = "Use invalid input size '" + inputSize + "'. Valid sizes: " + NasBenchmarkSet.getInputSizes();
		if(strict) {
			throw message;
		} 
			
		println(message);
		return false;
	}
	
	return true;
}
*/

NasBenchmarkSet.prototype.setBenchmarks = function() {
	this._testBenchmarks = getBenchmarkNames().parse(arrayFromArgs(arguments));
/*
 	var argsArray = arrayFromArgs(arguments);
	
	// Clear benchmarks
	this._testBenchmarks = [];
	for(var arg of argsArray) {
		if(!NasBenchmarkSet._checkBenchName(arg)) {
			continue;
		}
		
		this._testBenchmarks.push(arg);
	}
*/	
}

NasBenchmarkSet.prototype.setInputSizes = function() {
	this._testInputSizes = getInputSizes().parse(arrayFromArgs(arguments));

/*
 	var argsArray = arrayFromArgs(arguments);
	
	// Clear sizes
	this._testInputSizes = [];
	for(var arg of argsArray) {
		if(!NasBenchmarkSet._checkInputSize(arg)) {
			continue;
		}
		
		this._testInputSizes.push(arg);
	}
*/	
}


/**
 * Prints the current NAS benchmark set.
 */
NasBenchmarkSet.prototype.print = function() {
	println("BenchmarkSet: " + this.getName());
	println("Benchmark names: " + this._testBenchmarks);
	println("Benchmark sizes: " + this._testInputSizes);	

	for(var benchName of this._testBenchmarks) {

		print(benchName+":");

		for(var inputSize of this._testInputSizes) {

			if(NasBenchmarkSet.isSizeSupported(benchName, inputSize)) {
				print(" " + inputSize);
			}
		}
		
		println();
	}
}

/*** IMPLEMENTATIONS ***/

NasBenchmarkSet.prototype._getInstancesPrivate = function() {

	var instances = [];

	for(var benchName of this._testBenchmarks) {
	
		for(var inputSize of this._testInputSizes) {
		
			if(!NasBenchmarkSet.isSizeSupported (benchName, inputSize)) {
				continue;
			}
		
			instances.push(new NasBenchmarkInstance(benchName, inputSize));
		
		}	
	}
	
	return instances;
}
